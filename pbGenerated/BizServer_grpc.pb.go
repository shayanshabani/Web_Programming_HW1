// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: BizServer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetUsersServiceClient is the client API for GetUsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetUsersServiceClient interface {
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	GetUsersWithInjection(ctx context.Context, in *GetUsersWithInjectionRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
}

type getUsersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetUsersServiceClient(cc grpc.ClientConnInterface) GetUsersServiceClient {
	return &getUsersServiceClient{cc}
}

func (c *getUsersServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/BizServer.GetUsersService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getUsersServiceClient) GetUsersWithInjection(ctx context.Context, in *GetUsersWithInjectionRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/BizServer.GetUsersService/GetUsersWithInjection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetUsersServiceServer is the server API for GetUsersService service.
// All implementations must embed UnimplementedGetUsersServiceServer
// for forward compatibility
type GetUsersServiceServer interface {
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	GetUsersWithInjection(context.Context, *GetUsersWithInjectionRequest) (*GetUsersResponse, error)
	mustEmbedUnimplementedGetUsersServiceServer()
}

// UnimplementedGetUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGetUsersServiceServer struct {
}

func (UnimplementedGetUsersServiceServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedGetUsersServiceServer) GetUsersWithInjection(context.Context, *GetUsersWithInjectionRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersWithInjection not implemented")
}
func (UnimplementedGetUsersServiceServer) mustEmbedUnimplementedGetUsersServiceServer() {}

// UnsafeGetUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetUsersServiceServer will
// result in compilation errors.
type UnsafeGetUsersServiceServer interface {
	mustEmbedUnimplementedGetUsersServiceServer()
}

func RegisterGetUsersServiceServer(s grpc.ServiceRegistrar, srv GetUsersServiceServer) {
	s.RegisterService(&GetUsersService_ServiceDesc, srv)
}

func _GetUsersService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetUsersServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BizServer.GetUsersService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetUsersServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetUsersService_GetUsersWithInjection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersWithInjectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetUsersServiceServer).GetUsersWithInjection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BizServer.GetUsersService/GetUsersWithInjection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetUsersServiceServer).GetUsersWithInjection(ctx, req.(*GetUsersWithInjectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetUsersService_ServiceDesc is the grpc.ServiceDesc for GetUsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetUsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BizServer.GetUsersService",
	HandlerType: (*GetUsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsers",
			Handler:    _GetUsersService_GetUsers_Handler,
		},
		{
			MethodName: "GetUsersWithInjection",
			Handler:    _GetUsersService_GetUsersWithInjection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "BizServer.proto",
}
