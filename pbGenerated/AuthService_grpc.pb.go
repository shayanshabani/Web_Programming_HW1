// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: AuthService.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Auth_ServiceClient is the client API for Auth_Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Auth_ServiceClient interface {
	ReqPq(ctx context.Context, in *ReqPq_Request, opts ...grpc.CallOption) (*ReqPq_Response, error)
	Req_DHParams(ctx context.Context, in *ReqDh_Request, opts ...grpc.CallOption) (*ReqDh_Response, error)
	Authenticate(ctx context.Context, in *Seek, opts ...grpc.CallOption) (*Confirm, error)
}

type auth_ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuth_ServiceClient(cc grpc.ClientConnInterface) Auth_ServiceClient {
	return &auth_ServiceClient{cc}
}

func (c *auth_ServiceClient) ReqPq(ctx context.Context, in *ReqPq_Request, opts ...grpc.CallOption) (*ReqPq_Response, error) {
	out := new(ReqPq_Response)
	err := c.cc.Invoke(ctx, "/proto.Auth_Service/req_pq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth_ServiceClient) Req_DHParams(ctx context.Context, in *ReqDh_Request, opts ...grpc.CallOption) (*ReqDh_Response, error) {
	out := new(ReqDh_Response)
	err := c.cc.Invoke(ctx, "/proto.Auth_Service/req_DH_params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auth_ServiceClient) Authenticate(ctx context.Context, in *Seek, opts ...grpc.CallOption) (*Confirm, error) {
	out := new(Confirm)
	err := c.cc.Invoke(ctx, "/proto.Auth_Service/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Auth_ServiceServer is the server API for Auth_Service service.
// All implementations must embed UnimplementedAuth_ServiceServer
// for forward compatibility
type Auth_ServiceServer interface {
	ReqPq(context.Context, *ReqPq_Request) (*ReqPq_Response, error)
	Req_DHParams(context.Context, *ReqDh_Request) (*ReqDh_Response, error)
	Authenticate(context.Context, *Seek) (*Confirm, error)
	mustEmbedUnimplementedAuth_ServiceServer()
}

// UnimplementedAuth_ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuth_ServiceServer struct {
}

func (UnimplementedAuth_ServiceServer) ReqPq(context.Context, *ReqPq_Request) (*ReqPq_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqPq not implemented")
}
func (UnimplementedAuth_ServiceServer) Req_DHParams(context.Context, *ReqDh_Request) (*ReqDh_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Req_DHParams not implemented")
}
func (UnimplementedAuth_ServiceServer) Authenticate(context.Context, *Seek) (*Confirm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuth_ServiceServer) mustEmbedUnimplementedAuth_ServiceServer() {}

// UnsafeAuth_ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Auth_ServiceServer will
// result in compilation errors.
type UnsafeAuth_ServiceServer interface {
	mustEmbedUnimplementedAuth_ServiceServer()
}

func RegisterAuth_ServiceServer(s grpc.ServiceRegistrar, srv Auth_ServiceServer) {
	s.RegisterService(&Auth_Service_ServiceDesc, srv)
}

func _Auth_Service_ReqPq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPq_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth_ServiceServer).ReqPq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Auth_Service/req_pq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth_ServiceServer).ReqPq(ctx, req.(*ReqPq_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Service_Req_DHParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDh_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth_ServiceServer).Req_DHParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Auth_Service/req_DH_params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth_ServiceServer).Req_DHParams(ctx, req.(*ReqDh_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Service_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Seek)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth_ServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Auth_Service/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth_ServiceServer).Authenticate(ctx, req.(*Seek))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_Service_ServiceDesc is the grpc.ServiceDesc for Auth_Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Auth_Service",
	HandlerType: (*Auth_ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "req_pq",
			Handler:    _Auth_Service_ReqPq_Handler,
		},
		{
			MethodName: "req_DH_params",
			Handler:    _Auth_Service_Req_DHParams_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _Auth_Service_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AuthService.proto",
}
